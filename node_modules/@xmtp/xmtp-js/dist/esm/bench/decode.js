var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConversationV1, ConversationV2, } from './../src/conversations/Conversation';
import { MessageV1 } from '../src/Message';
import { newLocalHostClient } from '../test/helpers';
import { SignedPublicKeyBundle } from '../src/crypto';
import { MESSAGE_SIZES, newPrivateKeyBundle, randomBytes, wrapSuite, } from './helpers';
import { add } from 'benny';
import { fetcher } from '@xmtp/proto';
import { dateToNs } from '../src/utils';
const decodeV1 = () => {
    return MESSAGE_SIZES.map((size) => add(`decode and decrypt a ${size} byte v1 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield newLocalHostClient();
        const bob = yield newPrivateKeyBundle();
        const message = randomBytes(size);
        const encodedMessage = yield MessageV1.encode(alice.keystore, yield alice.encodeContent(message), alice.publicKeyBundle, bob.getPublicKeyBundle(), new Date());
        const messageBytes = encodedMessage.toBytes();
        const convo = new ConversationV1(alice, bob.identityKey.publicKey.walletSignatureAddress(), new Date());
        const envelope = {
            contentTopic: convo.topic,
            message: fetcher.b64Encode(messageBytes, 0, messageBytes.length),
        };
        return () => __awaiter(void 0, void 0, void 0, function* () {
            yield convo.decodeMessage(envelope);
        });
    })));
};
const decodeV2 = () => {
    return MESSAGE_SIZES.map((size) => add(`decode and decrypt a ${size} byte v2 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const alice = yield newLocalHostClient();
        const bob = yield newPrivateKeyBundle();
        const message = randomBytes(size);
        const invite = yield alice.keystore.createInvite({
            recipient: SignedPublicKeyBundle.fromLegacyBundle(bob.getPublicKeyBundle()),
            createdNs: dateToNs(new Date()),
            context: undefined,
        });
        const convo = new ConversationV2(alice, (_b = (_a = invite.conversation) === null || _a === void 0 ? void 0 : _a.topic) !== null && _b !== void 0 ? _b : '', bob.identityKey.publicKey.walletSignatureAddress(), new Date(), undefined);
        const payload = yield alice.encodeContent(message);
        const encodedMessage = yield convo.createMessage(payload);
        const messageBytes = encodedMessage.toBytes();
        const envelope = {
            contentTopic: convo.topic,
            message: fetcher.b64Encode(messageBytes, 0, messageBytes.length),
        };
        return () => __awaiter(void 0, void 0, void 0, function* () {
            yield convo.decodeMessage(envelope);
        });
    })));
};
export default wrapSuite('decode', ...decodeV1(), ...decodeV2());
//# sourceMappingURL=decode.js.map