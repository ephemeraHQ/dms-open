var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { keccak256 } from 'js-sha3';
import { authn, signature, publicKey } from '@xmtp/proto';
import AuthData from './AuthData';
import { hexToBytes } from '../crypto/utils';
import Token from './Token';
export default class LocalAuthenticator {
    constructor(identityKey) {
        if (!identityKey.publicKey.signature) {
            throw new Error('Provided public key is not signed');
        }
        this.identityKey = identityKey;
    }
    createToken(timestamp) {
        return __awaiter(this, void 0, void 0, function* () {
            const authData = AuthData.create(this.identityKey.publicKey.walletSignatureAddress(), timestamp || new Date());
            const authDataBytes = authData.toBytes();
            const digest = keccak256(authDataBytes);
            const authSig = yield this.identityKey.sign(hexToBytes(digest));
            return new Token(authn.Token.fromPartial({
                identityKey: publicKey.PublicKey.fromPartial(
                // The generated types are overly strict and don't like our additional methods
                // eslint-disable-next-line
                // @ts-ignore
                this.identityKey.publicKey),
                authDataBytes,
                // The generated types are overly strict and don't like our additional methods
                // eslint-disable-next-line
                // @ts-ignore
                authDataSignature: signature.Signature.fromPartial(authSig),
            }));
        });
    }
}
//# sourceMappingURL=LocalAuthenticator.js.map