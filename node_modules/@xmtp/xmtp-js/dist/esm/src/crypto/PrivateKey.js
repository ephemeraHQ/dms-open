var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { privateKey } from '@xmtp/proto';
import * as secp from '@noble/secp256k1';
import Long from 'long';
import Signature, { ecdsaSignerKey, } from './Signature';
import { AccountLinkedPublicKey, PublicKey, SignedPublicKey, UnsignedPublicKey, } from './PublicKey';
import { decrypt, encrypt, sha256 } from './encryption';
import { equalBytes } from './utils';
// Validate SECP256k1 private key
function secp256k1Check(key) {
    if (key.bytes.length !== 32) {
        throw new Error(`invalid private key length: ${key.bytes.length}`);
    }
}
// A private key signed with another key pair or a wallet.
export class SignedPrivateKey {
    constructor(obj) {
        if (!obj.secp256k1) {
            throw new Error('invalid private key');
        }
        secp256k1Check(obj.secp256k1);
        this.secp256k1 = obj.secp256k1;
        this.createdNs = obj.createdNs;
        if (!obj.publicKey) {
            throw new Error('missing public key');
        }
        this.publicKey = new SignedPublicKey(obj.publicKey);
    }
    // Create a random key pair signed by the signer.
    static generate(signer) {
        return __awaiter(this, void 0, void 0, function* () {
            const secp256k1 = {
                bytes: secp.utils.randomPrivateKey(),
            };
            const createdNs = Long.fromNumber(new Date().getTime()).mul(1000000);
            const unsigned = new UnsignedPublicKey({
                secp256k1Uncompressed: {
                    bytes: secp.getPublicKey(secp256k1.bytes),
                },
                createdNs,
            });
            const signed = yield signer.signKey(unsigned);
            return new SignedPrivateKey({
                secp256k1,
                createdNs,
                publicKey: signed,
            });
        });
    }
    // Time the key was generated.
    generated() {
        return new Date(this.createdNs.div(1000000).toNumber());
    }
    // Sign provided digest.
    sign(digest) {
        return __awaiter(this, void 0, void 0, function* () {
            const [signature, recovery] = yield secp.sign(digest, this.secp256k1.bytes, {
                recovered: true,
                der: false,
            });
            return new Signature({
                ecdsaCompact: { bytes: signature, recovery },
            });
        });
    }
    // Sign provided public key.
    signKey(pub) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyBytes = pub.toBytes();
            const digest = yield sha256(keyBytes);
            const signature = yield this.sign(digest);
            return new SignedPublicKey({
                keyBytes,
                signature,
            });
        });
    }
    // Return public key of the signer of the provided signed key.
    static signerKey(key, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            const digest = yield sha256(key.bytesToSign());
            return ecdsaSignerKey(digest, signature);
        });
    }
    // Derive shared secret from peer's PublicKey;
    // the peer can derive the same secret using their private key and our public key.
    sharedSecret(peer) {
        return secp.getSharedSecret(this.secp256k1.bytes, peer.secp256k1Uncompressed.bytes, false);
    }
    // encrypt plain bytes using a shared secret derived from peer's PublicKey;
    // additionalData allows including unencrypted parts of a Message in the authentication
    // protection provided by the encrypted part (to make the whole Message tamper evident)
    encrypt(plain, peer, additionalData) {
        const secret = this.sharedSecret(peer);
        return encrypt(plain, secret, additionalData);
    }
    // decrypt Ciphertext using a shared secret derived from peer's PublicKey;
    // throws if any part of Ciphertext or additionalData was tampered with
    decrypt(encrypted, peer, additionalData) {
        const secret = this.sharedSecret(peer);
        return decrypt(encrypted, secret, additionalData);
    }
    // Does the provided PublicKey correspond to this PrivateKey?
    matches(key) {
        return this.publicKey.equals(key);
    }
    // Is other the same/equivalent key?
    equals(other) {
        return (equalBytes(this.secp256k1.bytes, other.secp256k1.bytes) &&
            this.publicKey.equals(other.publicKey));
    }
    // Encode this key into bytes.
    toBytes() {
        return privateKey.SignedPrivateKey.encode(this).finish();
    }
    // Decode key from bytes.
    static fromBytes(bytes) {
        return new SignedPrivateKey(privateKey.SignedPrivateKey.decode(bytes));
    }
    static fromLegacyKey(key, signedByWallet) {
        return new SignedPrivateKey({
            createdNs: key.timestamp.mul(1000000),
            secp256k1: key.secp256k1,
            publicKey: SignedPublicKey.fromLegacyKey(key.publicKey, signedByWallet),
        });
    }
}
export class AccountLinkedPrivateKeyV1 {
    constructor(obj) {
        if (!obj.secp256k1) {
            throw new Error('invalid private key');
        }
        secp256k1Check(obj.secp256k1);
        this.secp256k1 = obj.secp256k1;
        this.createdNs = obj.createdNs;
        if (!obj.publicKey) {
            throw new Error('missing public key');
        }
        this.publicKey = new AccountLinkedPublicKey(obj.publicKey);
        if (!equalBytes(secp.getPublicKey(this.secp256k1.bytes), this.publicKey.secp256k1Uncompressed.bytes)) {
            throw new Error('private key does not match public key');
        }
    }
    // Sign provided digest.
    sign(digest) {
        return __awaiter(this, void 0, void 0, function* () {
            const [signature, recovery] = yield secp.sign(digest, this.secp256k1.bytes, {
                recovered: true,
                der: false,
            });
            return new Signature({
                ecdsaCompact: { bytes: signature, recovery },
            });
        });
    }
    // Sign provided public key.
    signKey(pub) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyBytes = pub.toBytes();
            const digest = yield sha256(keyBytes);
            const signature = yield this.sign(digest);
            return new SignedPublicKey({
                keyBytes,
                signature,
            });
        });
    }
    // Does the provided PublicKey correspond to this PrivateKey?
    matches(key) {
        return this.publicKey.equals(key);
    }
}
export class AccountLinkedPrivateKey extends AccountLinkedPrivateKeyV1 {
    constructor(obj) {
        if (obj.v1) {
            super(obj.v1);
            this.v1 = obj.v1;
        }
        else {
            throw new Error('unsupported version');
        }
    }
    // Create a random key pair signed by the signer.
    static generate(signer, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const secp256k1 = {
                bytes: secp.utils.randomPrivateKey(),
            };
            const createdNs = Long.fromNumber(new Date().getTime()).mul(1000000);
            const unsigned = new UnsignedPublicKey({
                secp256k1Uncompressed: {
                    bytes: secp.getPublicKey(secp256k1.bytes),
                },
                createdNs,
            });
            const signed = yield signer.signKeyWithRole(unsigned, role);
            return new AccountLinkedPrivateKey({
                v1: new AccountLinkedPrivateKeyV1({
                    secp256k1,
                    createdNs,
                    publicKey: signed,
                }),
            });
        });
    }
    static fromLegacyKey(key, role) {
        return new AccountLinkedPrivateKey({
            v1: new AccountLinkedPrivateKeyV1({
                createdNs: key.createdNs,
                secp256k1: key.secp256k1,
                publicKey: AccountLinkedPublicKey.fromLegacyKey(key.publicKey, role),
            }),
        });
    }
    // derive shared secret from peer's PublicKey;
    // the peer can derive the same secret using their PrivateKey and our PublicKey
    sharedSecret(peer) {
        return secp.getSharedSecret(this.secp256k1.bytes, peer.secp256k1Uncompressed.bytes, false);
    }
}
// LEGACY: PrivateKey represents a secp256k1 private key.
export class PrivateKey {
    constructor(obj) {
        if (!obj.secp256k1) {
            throw new Error('invalid private key');
        }
        secp256k1Check(obj.secp256k1);
        this.timestamp = obj.timestamp;
        this.secp256k1 = obj.secp256k1;
        if (!obj.publicKey) {
            throw new Error('missing public key');
        }
        this.publicKey = new PublicKey(obj.publicKey);
    }
    // create a random PrivateKey/PublicKey pair.
    static generate() {
        const secp256k1 = {
            bytes: secp.utils.randomPrivateKey(),
        };
        const timestamp = Long.fromNumber(new Date().getTime());
        return new PrivateKey({
            secp256k1,
            timestamp,
            publicKey: new PublicKey({
                secp256k1Uncompressed: {
                    bytes: secp.getPublicKey(secp256k1.bytes),
                },
                timestamp,
            }),
        });
    }
    generated() {
        return new Date(this.timestamp.toNumber());
    }
    // sign provided digest
    sign(digest) {
        return __awaiter(this, void 0, void 0, function* () {
            const [signature, recovery] = yield secp.sign(digest, this.secp256k1.bytes, {
                recovered: true,
                der: false,
            });
            return new Signature({
                ecdsaCompact: { bytes: signature, recovery },
            });
        });
    }
    // sign provided public key
    signKey(pub) {
        return __awaiter(this, void 0, void 0, function* () {
            const digest = yield sha256(pub.bytesToSign());
            pub.signature = yield this.sign(digest);
            return pub;
        });
    }
    // derive shared secret from peer's PublicKey;
    // the peer can derive the same secret using their PrivateKey and our PublicKey
    sharedSecret(peer) {
        return secp.getSharedSecret(this.secp256k1.bytes, peer.secp256k1Uncompressed.bytes, false);
    }
    // encrypt plain bytes using a shared secret derived from peer's PublicKey;
    // additionalData allows including unencrypted parts of a Message in the authentication
    // protection provided by the encrypted part (to make the whole Message tamper evident)
    encrypt(plain, peer, additionalData) {
        const secret = this.sharedSecret(peer);
        return encrypt(plain, secret, additionalData);
    }
    // decrypt Ciphertext using a shared secret derived from peer's PublicKey;
    // throws if any part of Ciphertext or additionalData was tampered with
    decrypt(encrypted, peer, additionalData) {
        const secret = this.sharedSecret(peer);
        return decrypt(encrypted, secret, additionalData);
    }
    // Does the provided PublicKey correspond to this PrivateKey?
    matches(key) {
        return this.publicKey.equals(key);
    }
    // Encode this key into bytes.
    toBytes() {
        return privateKey.PrivateKey.encode(this).finish();
    }
    // Decode key from bytes.
    static fromBytes(bytes) {
        return new PrivateKey(privateKey.PrivateKey.decode(bytes));
    }
}
//# sourceMappingURL=PrivateKey.js.map