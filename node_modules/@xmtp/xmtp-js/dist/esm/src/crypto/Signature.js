var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { signature } from '@xmtp/proto';
import Long from 'long';
import * as secp from '@noble/secp256k1';
import { PublicKey, UnsignedPublicKey, SignedPublicKey, AccountLinkedPublicKey, } from './PublicKey';
import { SignedPrivateKey } from './PrivateKey';
import { utils } from 'ethers';
import { bytesToBase64, bytesToHex, equalBytes, hexToBytes } from './utils';
import { toUtf8Bytes } from 'ethers/lib/utils';
import { SiweMessage } from 'siwe';
// Validate signature.
function ecdsaCheck(sig) {
    if (sig.bytes.length !== 64) {
        throw new Error(`invalid signature length: ${sig.bytes.length}`);
    }
    if (sig.recovery !== 0 && sig.recovery !== 1) {
        throw new Error(`invalid recovery bit: ${sig.recovery}`);
    }
}
// Compare signatures.
function ecdsaEqual(a, b) {
    return a.recovery === b.recovery && equalBytes(a.bytes, b.bytes);
}
// Derive public key of the signer from the digest and the signature.
export function ecdsaSignerKey(digest, signature) {
    const bytes = secp.recoverPublicKey(digest, signature.bytes, signature.recovery);
    return bytes
        ? new UnsignedPublicKey({
            secp256k1Uncompressed: { bytes },
            createdNs: Long.fromNumber(0),
        })
        : undefined;
}
export default class Signature {
    constructor(obj) {
        if (obj.ecdsaCompact) {
            ecdsaCheck(obj.ecdsaCompact);
            this.ecdsaCompact = obj.ecdsaCompact;
        }
        else if (obj.walletEcdsaCompact) {
            ecdsaCheck(obj.walletEcdsaCompact);
            this.walletEcdsaCompact = obj.walletEcdsaCompact;
        }
        else {
            throw new Error('invalid signature');
        }
    }
    // Return the public key that validates provided key's signature.
    signerKey(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.ecdsaCompact) {
                return SignedPrivateKey.signerKey(key, this.ecdsaCompact);
            }
            else if (this.walletEcdsaCompact) {
                return WalletSigner.signerKey(key, this.walletEcdsaCompact);
            }
            else {
                return undefined;
            }
        });
    }
    // LEGACY: Return the public key that validates this signature given the provided digest.
    // Return undefined if the signature is malformed.
    getPublicKey(digest) {
        if (!this.ecdsaCompact) {
            throw new Error('invalid signature');
        }
        const bytes = secp.recoverPublicKey(digest, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);
        return bytes
            ? new PublicKey({
                secp256k1Uncompressed: { bytes },
                timestamp: Long.fromNumber(0),
            })
            : undefined;
    }
    // Is this the same/equivalent signature as other?
    equals(other) {
        if (this.ecdsaCompact && other.ecdsaCompact) {
            return ecdsaEqual(this.ecdsaCompact, other.ecdsaCompact);
        }
        if (this.walletEcdsaCompact && other.walletEcdsaCompact) {
            return ecdsaEqual(this.walletEcdsaCompact, other.walletEcdsaCompact);
        }
        return false;
    }
    toBytes() {
        return signature.Signature.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Signature(signature.Signature.decode(bytes));
    }
}
class AccountLinkedStaticSignatureV1 {
    constructor(obj) {
        if (!obj.text || !obj.signature) {
            throw new Error('Invalid AccountLinkedStaticSignatureV1');
        }
        this.text = obj.text;
        this.signature = new Signature(obj.signature);
        if (!this.signature.walletEcdsaCompact) {
            throw new Error('Invalid AccountLinkedStaticSignatureV1 does not have ecdsaCompact');
        }
        this._walletEcdsaCompact = this.signature.walletEcdsaCompact;
    }
    get walletEcdsaCompact() {
        return this._walletEcdsaCompact;
    }
}
export class AccountLinkedStaticSignature extends AccountLinkedStaticSignatureV1 {
    constructor(obj) {
        if (!obj.v1) {
            throw new Error('Unsupported AccountLinkedStaticSignature version');
        }
        super(obj.v1);
        this.v1 = obj.v1;
    }
    static create(text, signature) {
        return new AccountLinkedStaticSignature({
            v1: {
                text,
                signature,
            },
        });
    }
}
class AccountLinkedSIWESignatureV1 {
    constructor(obj) {
        if (!obj.text || !obj.signature) {
            throw new Error('Invalid AccountLinkedSIWESignatureV1');
        }
        this.text = obj.text;
        this.signature = new Signature(obj.signature);
        if (!this.signature.walletEcdsaCompact) {
            throw new Error('Invalid AccountLinkedSIWESignatureV1 does not have ecdsaCompact');
        }
        this._walletEcdsaCompact = this.signature.walletEcdsaCompact;
    }
    get walletEcdsaCompact() {
        return this._walletEcdsaCompact;
    }
}
export class AccountLinkedSIWESignature extends AccountLinkedSIWESignatureV1 {
    constructor(obj) {
        if (!obj.v1) {
            throw new Error('Unsupported AccountLinkedSIWESignature version');
        }
        super(obj.v1);
        this.v1 = obj.v1;
    }
    static create(text, signature) {
        return new AccountLinkedSIWESignature({
            v1: {
                text,
                signature,
            },
        });
    }
}
export var AccountLinkedRole;
(function (AccountLinkedRole) {
    AccountLinkedRole[AccountLinkedRole["INBOX_KEY"] = 0] = "INBOX_KEY";
    AccountLinkedRole[AccountLinkedRole["SEND_KEY"] = 1] = "SEND_KEY";
})(AccountLinkedRole || (AccountLinkedRole = {}));
// A wallet based KeySigner.
export class WalletSigner {
    constructor(wallet) {
        this.wallet = wallet;
    }
    static identitySigRequestText(keyBytes) {
        // Note that an update to this signature request text will require
        // addition of backward compatibility for existing signatures
        // and/or a migration; otherwise clients will fail to verify previously
        // signed keys.
        return ('XMTP : Create Identity\n' +
            `${bytesToHex(keyBytes)}\n` +
            '\n' +
            'For more info: https://xmtp.org/signatures/');
    }
    static signerKey(key, signature) {
        const digest = hexToBytes(utils.hashMessage(this.identitySigRequestText(key.bytesToSign())));
        return ecdsaSignerKey(digest, signature);
    }
    signKey(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyBytes = key.toBytes();
            const sigString = yield this.wallet.signMessage(WalletSigner.identitySigRequestText(keyBytes));
            const eSig = utils.splitSignature(sigString);
            const r = hexToBytes(eSig.r);
            const s = hexToBytes(eSig.s);
            const sigBytes = new Uint8Array(64);
            sigBytes.set(r);
            sigBytes.set(s, r.length);
            const signature = new Signature({
                walletEcdsaCompact: {
                    bytes: sigBytes,
                    recovery: eSig.recoveryParam,
                },
            });
            return new SignedPublicKey({ keyBytes, signature });
        });
    }
}
export class SIWEWalletAccountLinkSigner {
    constructor(wallet) {
        this.wallet = wallet;
    }
    static accountLinkedSIWERoleRequestText(role) {
        switch (role) {
            case AccountLinkedRole.INBOX_KEY:
                return 'AllowAllRead';
            case AccountLinkedRole.SEND_KEY:
                return 'GrantSendPermissions';
        }
    }
    static accountLinkedSIWEResourceRoleText(keyBytes, role) {
        return `https://xmtp.org/siwe/${SIWEWalletAccountLinkSigner.accountLinkedSIWERoleRequestText(role)}/secp256k1/${bytesToBase64(keyBytes)}`;
    }
    // Default SIWE text to be signed, most apps will NOT want to use this.
    // Most apps will want to include the resource string in their own SIWE to avoid
    // asking for multiple SIWE signatures.
    static defaultAccountLinkSIWERequestText(key, role, walletAddress) {
        // Create a SIWE message
        // - statement can be anything
        // - get the address from the signer
        // - add the resource string with keybytes
        const keyBytes = key.toBytes();
        const resource = SIWEWalletAccountLinkSigner.accountLinkedSIWEResourceRoleText(keyBytes, role);
        const siwe = new SiweMessage({
            statement: 'XMTP Account Link with Role: ' + role,
            address: walletAddress,
            domain: 'xmtp.org',
            version: '1',
            uri: 'https://xmtp.org',
            chainId: 1,
            resources: [resource],
        });
        return siwe.prepareMessage();
    }
    // NOTE: this will NOT be used in practice, mostly here for demonstration purposes
    // in reality, the SDK consumer will likely use their login SIWE with the role resource
    // and pass it directly down into the client
    signKeyWithRole(key, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyBytes = key.toBytes();
            const siweMessageBytes = toUtf8Bytes(SIWEWalletAccountLinkSigner.defaultAccountLinkSIWERequestText(key, role, yield this.wallet.getAddress()));
            const sigString = yield this.wallet.signMessage(siweMessageBytes);
            const eSig = utils.splitSignature(sigString);
            const r = hexToBytes(eSig.r);
            const s = hexToBytes(eSig.s);
            const sigBytes = new Uint8Array(64);
            sigBytes.set(r);
            sigBytes.set(s, r.length);
            const signature = new Signature({
                walletEcdsaCompact: {
                    bytes: sigBytes,
                    recovery: eSig.recoveryParam,
                },
            });
            return AccountLinkedPublicKey.create(keyBytes, undefined, AccountLinkedSIWESignature.create(siweMessageBytes, signature));
        });
    }
}
export class StaticWalletAccountLinkSigner {
    constructor(wallet) {
        this.wallet = wallet;
    }
    static accountLinkedRoleRequestText(role) {
        switch (role) {
            case AccountLinkedRole.INBOX_KEY:
                return 'Create Identity';
            case AccountLinkedRole.SEND_KEY:
                return 'Grant Send Permissions';
        }
    }
    static accountLinkRequestText(keyBytes, role) {
        // Note that an update to this signature request text will require
        // addition of backward compatibility for existing signatures
        // and/or a migration; otherwise clients will fail to verify previously
        // signed keys.
        return (`XMTP : ${StaticWalletAccountLinkSigner.accountLinkedRoleRequestText(role)}\n` +
            `${bytesToHex(keyBytes)}\n` +
            '\n' +
            'For more info: https://xmtp.org/signatures/');
    }
    signKeyWithRole(key, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyBytes = key.toBytes();
            const requestTextBytes = toUtf8Bytes(StaticWalletAccountLinkSigner.accountLinkRequestText(keyBytes, role));
            const sigString = yield this.wallet.signMessage(requestTextBytes);
            const eSig = utils.splitSignature(sigString);
            const r = hexToBytes(eSig.r);
            const s = hexToBytes(eSig.s);
            const sigBytes = new Uint8Array(64);
            sigBytes.set(r);
            sigBytes.set(s, r.length);
            const signature = new Signature({
                walletEcdsaCompact: {
                    bytes: sigBytes,
                    recovery: eSig.recoveryParam,
                },
            });
            return AccountLinkedPublicKey.create(keyBytes, AccountLinkedStaticSignature.create(requestTextBytes, signature), undefined /* siweSignature */);
        });
    }
}
//# sourceMappingURL=Signature.js.map