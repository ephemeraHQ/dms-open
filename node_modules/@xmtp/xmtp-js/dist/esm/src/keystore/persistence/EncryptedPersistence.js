var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getPublic, encrypt, decrypt } from '../../crypto/ecies';
import { SignedEciesCiphertext, } from '../../crypto';
/**
 * EncryptedPersistence is a Persistence implementation that uses ECIES to encrypt all values
 * ECIES encryption protects against unauthorized reads, but not unauthorized writes.
 * A third party with access to the underlying store could write malicious data using the public key of the owner
 */
export default class EncryptedPersistence {
    constructor(persistence, privateKey) {
        this.persistence = persistence;
        this.privateKey = privateKey;
        this.privateKeyBytes = Buffer.from(privateKey.secp256k1.bytes);
        this.publicKey = getPublic(this.privateKeyBytes);
    }
    getItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const encrypted = yield this.persistence.getItem(key);
            if (encrypted) {
                return this.decrypt(encrypted);
            }
            return null;
        });
    }
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const encrypted = yield this.encrypt(value);
            yield this.persistence.setItem(key, encrypted);
        });
    }
    encrypt(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const ecies = yield encrypt(this.publicKey, Buffer.from(value));
            return this.serializeEcies(ecies);
        });
    }
    decrypt(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const ecies = yield this.deserializeEcies(value);
            const result = yield decrypt(this.privateKeyBytes, ecies);
            return Uint8Array.from(result);
        });
    }
    serializeEcies(data) {
        return __awaiter(this, void 0, void 0, function* () {
            // This will create and sign a `SignedEciesCiphertext` payload based on the provided data
            const protoVal = yield SignedEciesCiphertext.create(data, this.privateKey);
            return protoVal.toBytes();
        });
    }
    deserializeEcies(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const protoVal = SignedEciesCiphertext.fromBytes(data);
            // Verify the signature upon deserializing
            if (!(yield protoVal.verify(this.privateKey.publicKey))) {
                throw new Error('signature validation failed');
            }
            const ecies = protoVal.ciphertext;
            return {
                ciphertext: Buffer.from(ecies.ciphertext),
                mac: Buffer.from(ecies.mac),
                iv: Buffer.from(ecies.iv),
                ephemeralPublicKey: Buffer.from(ecies.ephemeralPublicKey),
            };
        });
    }
}
//# sourceMappingURL=EncryptedPersistence.js.map