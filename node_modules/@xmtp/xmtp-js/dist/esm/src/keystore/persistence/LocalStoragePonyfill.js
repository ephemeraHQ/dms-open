// Fully in-memory polyfill for the browser storage API.
// Borrowed from https://github.com/MitchellCash/node-storage-polyfill but implemented as a ponyfill instead of a polyfill
export default class LocalStoragePonyfill {
    constructor() {
        this.store = new Map();
    }
    get length() {
        return this.store.size;
    }
    clear() {
        this.store = new Map();
    }
    getItem(key) {
        this.validateString(key);
        if (this.store.has(key)) {
            return String(this.store.get(key));
        }
        return null;
    }
    key(index) {
        if (index === undefined) {
            // This is the TypeError implemented in Chrome, Firefox throws "Storage.key: At least 1
            // argument required, but only 0 passed".
            throw new TypeError("Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.");
        }
        const keys = [...this.store.keys()];
        if (index >= keys.length) {
            return null;
        }
        return keys[index];
    }
    removeItem(key) {
        this.validateString(key);
        this.store.delete(key);
    }
    setItem(key, value) {
        this.validateString(key);
        this.validateString(value);
        this.store.set(String(key), String(value));
    }
    validateString(val) {
        if (!(typeof val === 'string')) {
            throw new TypeError('Key must be a string');
        }
    }
}
//# sourceMappingURL=LocalStoragePonyfill.js.map