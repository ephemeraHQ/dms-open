var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import LocalStoragePonyfill from './LocalStoragePonyfill';
export default class LocalStoragePersistence {
    constructor() {
        this.storage =
            typeof localStorage !== 'undefined'
                ? localStorage
                : new LocalStoragePonyfill();
    }
    getItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = this.storage.getItem(key);
            if (value === null) {
                return null;
            }
            return Uint8Array.from(Buffer.from(value, 'binary'));
        });
    }
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            this.storage.setItem(key, Buffer.from(value).toString('binary'));
        });
    }
}
//# sourceMappingURL=LocalStoragePersistence.js.map