var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PrivateKeyBundleV1 } from '../../crypto';
import InMemoryKeystore from '../InMemoryKeystore';
import TopicPersistence from '../persistence/TopicPersistence';
import { KeystoreProviderUnavailableError } from './errors';
import { buildPersistenceFromOptions } from './helpers';
import NetworkKeyManager from './NetworkKeyManager';
/**
 * KeyGeneratorKeystoreProvider will create a new XMTP `PrivateKeyBundle` and persist it to the network
 * This provider should always be specified last in the list of `keystoreProviders` on client creation,
 * as it will overwrite any XMTP identities already on the network
 */
export default class KeyGeneratorKeystoreProvider {
    newKeystore(opts, apiClient, wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wallet) {
                throw new KeystoreProviderUnavailableError('Wallet required to generate new keys');
            }
            const bundle = yield PrivateKeyBundleV1.generate(wallet);
            const manager = new NetworkKeyManager(wallet, new TopicPersistence(apiClient));
            yield manager.storePrivateKeyBundle(bundle);
            return InMemoryKeystore.create(bundle, yield buildPersistenceFromOptions(opts, bundle));
        });
    }
}
//# sourceMappingURL=KeyGeneratorKeystoreProvider.js.map