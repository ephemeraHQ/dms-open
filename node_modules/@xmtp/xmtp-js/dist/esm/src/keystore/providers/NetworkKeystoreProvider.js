var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import NetworkKeyLoader from './NetworkKeyManager';
import { KeystoreProviderUnavailableError } from './errors';
import TopicPersistence from '../persistence/TopicPersistence';
import InMemoryKeystore from '../InMemoryKeystore';
import { buildPersistenceFromOptions } from './helpers';
/**
 * NetworkKeystoreProvider will look on the XMTP network for an `EncryptedPrivateKeyBundle`
 * on the user's private storage topic. If found, will decrypt the bundle using a wallet
 * signature and instantiate a Keystore instance using the decrypted value.
 */
export default class NetworkKeystoreProvider {
    newKeystore(opts, apiClient, wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wallet) {
                throw new KeystoreProviderUnavailableError('No wallet provided');
            }
            const loader = new NetworkKeyLoader(wallet, new TopicPersistence(apiClient));
            const keys = yield loader.loadPrivateKeyBundle();
            if (!keys) {
                throw new KeystoreProviderUnavailableError('No keys found');
            }
            return InMemoryKeystore.create(keys, yield buildPersistenceFromOptions(opts, keys));
        });
    }
}
//# sourceMappingURL=NetworkKeystoreProvider.js.map