var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { KeystoreProviderUnavailableError } from './errors';
import InMemoryKeystore from '../InMemoryKeystore';
import { decodePrivateKeyBundle, PrivateKeyBundleV2, } from '../../crypto/PrivateKeyBundle';
import { buildPersistenceFromOptions } from './helpers';
/**
 * StaticKeystoreProvider will look for a `privateKeyOverride` in the provided options,
 * and bootstrap a Keystore using those options if provided.
 *
 * If no `privateKeyOverride` is supplied will throw a `KeystoreProviderUnavailableError` causing
 * the client to continue iterating through the `KeystoreProviders` list.
 */
export default class StaticKeystoreProvider {
    newKeystore(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { privateKeyOverride } = opts;
            if (!privateKeyOverride) {
                throw new KeystoreProviderUnavailableError('No private key override provided');
            }
            const bundle = decodePrivateKeyBundle(privateKeyOverride);
            if (bundle instanceof PrivateKeyBundleV2) {
                throw new Error('V2 private key bundle found. Only V1 supported');
            }
            return InMemoryKeystore.create(bundle, yield buildPersistenceFromOptions(opts, bundle));
        });
    }
}
//# sourceMappingURL=StaticKeystoreProvider.js.map