var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { encrypt, decrypt, } from '../crypto';
export const decryptV1 = (myKeys, peerKeys, ciphertext, headerBytes, isSender) => __awaiter(void 0, void 0, void 0, function* () {
    const secret = yield myKeys.sharedSecret(peerKeys, myKeys.getCurrentPreKey().publicKey, // assumes that the current preKey is what was used to encrypt
    !isSender);
    return decrypt(ciphertext, secret, headerBytes);
});
export const encryptV1 = (keys, recipient, message, headerBytes) => __awaiter(void 0, void 0, void 0, function* () {
    const secret = yield keys.sharedSecret(recipient, keys.getCurrentPreKey().publicKey, false // assumes that the sender is the party doing the encrypting
    );
    return encrypt(message, secret, headerBytes);
});
export const decryptV2 = (ciphertext, secret, headerBytes) => decrypt(ciphertext, secret, headerBytes);
export const encryptV2 = (payload, secret, headerBytes) => encrypt(payload, secret, headerBytes);
//# sourceMappingURL=encryption.js.map