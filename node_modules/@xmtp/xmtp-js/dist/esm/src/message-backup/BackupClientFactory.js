var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BackupType, } from './BackupClient';
import NoBackupClient from './NoBackupClient';
import TopicStoreBackupClient from './TopicStoreBackupClient';
/**
 * Creates a backup client of the correct provider type (e.g. xmtp backup, no backup, etc).
 * Uses an existing user preference from the backend if it exists, else prompts for a new
 * one using the `providerSelector`
 *
 * @param walletAddress The public address of the user's wallet
 * @param selectBackupProvider A callback for determining the provider to use, in the event there is no
 * existing user preference. The app can define the policy to use here (e.g. prompt the user,
 * or default to a certain provider type).
 * @returns A backup client of the correct type
 */
export function createBackupClient(walletAddress, selectBackupProvider) {
    return __awaiter(this, void 0, void 0, function* () {
        const configuration = yield fetchOrCreateConfiguration(walletAddress, selectBackupProvider);
        switch (configuration.type) {
            case BackupType.none:
                return new NoBackupClient(configuration);
            case BackupType.xmtpTopicStore:
                return new TopicStoreBackupClient(configuration);
        }
    });
}
export function fetchOrCreateConfiguration(walletAddress, selectBackupProvider) {
    return __awaiter(this, void 0, void 0, function* () {
        // TODO: return existing configuration from the backend if it exists
        let backupConfiguration;
        const provider = yield selectBackupProvider();
        switch (provider.type) {
            case BackupType.none:
                backupConfiguration = NoBackupClient.createConfiguration();
                break;
            case BackupType.xmtpTopicStore:
                backupConfiguration =
                    TopicStoreBackupClient.createConfiguration(walletAddress);
                break;
        }
        // TODO: Persist new configuration to backend
        return backupConfiguration;
    });
}
//# sourceMappingURL=BackupClientFactory.js.map