/// <reference types="node" />
export declare type Ecies = {
    iv: Buffer;
    ephemeralPublicKey: Buffer;
    ciphertext: Buffer;
    mac: Buffer;
};
/**
 * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source
 * depending on your browser.
 *
 * @returns {Buffer} A 32-byte private key.
 * @function
 */
export declare function generatePrivate(): Buffer;
export declare function getPublic(privateKey: Buffer): Buffer;
/**
 * Get compressed version of public key.
 */
export declare function getPublicCompressed(privateKey: Buffer): Buffer;
export declare function sign(privateKey: Buffer, msg: Buffer): Promise<unknown>;
export declare function verify(publicKey: Buffer, msg: Buffer, sig: Buffer): Promise<unknown>;
export declare function derive(privateKeyA: Buffer, publicKeyB: Buffer): Promise<Buffer>;
export declare function encrypt(publicKeyTo: Buffer, msg: Buffer, opts?: {
    ephemPrivateKey?: Buffer;
    iv?: Buffer;
} | undefined): Promise<{
    iv: Buffer;
    ephemeralPublicKey: Buffer;
    ciphertext: Buffer;
    mac: Buffer;
}>;
export declare function decrypt(privateKey: Buffer, opts: Ecies): Promise<Buffer>;
