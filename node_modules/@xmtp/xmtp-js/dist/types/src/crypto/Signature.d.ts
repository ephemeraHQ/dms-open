import { signature } from '@xmtp/proto';
import { PublicKey, UnsignedPublicKey, SignedPublicKey, AccountLinkedPublicKey } from './PublicKey';
import { Signer } from '../types/Signer';
export declare type ECDSACompactWithRecovery = {
    bytes: Uint8Array;
    recovery: number;
};
export declare function ecdsaSignerKey(digest: Uint8Array, signature: ECDSACompactWithRecovery): UnsignedPublicKey | undefined;
export default class Signature implements signature.Signature {
    ecdsaCompact: ECDSACompactWithRecovery | undefined;
    walletEcdsaCompact: ECDSACompactWithRecovery | undefined;
    constructor(obj: Partial<signature.Signature>);
    signerKey(key: SignedPublicKey): Promise<UnsignedPublicKey | undefined>;
    getPublicKey(digest: Uint8Array): PublicKey | undefined;
    equals(other: Signature): boolean;
    toBytes(): Uint8Array;
    static fromBytes(bytes: Uint8Array): Signature;
}
declare class AccountLinkedStaticSignatureV1 implements signature.AccountLinkedStaticSignature_V1 {
    text: Uint8Array;
    signature: Signature;
    private _walletEcdsaCompact;
    constructor(obj: Partial<signature.AccountLinkedStaticSignature_V1>);
    get walletEcdsaCompact(): ECDSACompactWithRecovery;
}
export declare class AccountLinkedStaticSignature extends AccountLinkedStaticSignatureV1 implements signature.AccountLinkedStaticSignature {
    v1: signature.AccountLinkedStaticSignature_V1;
    constructor(obj: Partial<signature.AccountLinkedStaticSignature>);
    static create(text: Uint8Array, signature: Signature): AccountLinkedStaticSignature;
}
declare class AccountLinkedSIWESignatureV1 implements signature.AccountLinkedSIWESignature_V1 {
    text: Uint8Array;
    signature: Signature;
    private _walletEcdsaCompact;
    constructor(obj: Partial<signature.AccountLinkedStaticSignature_V1>);
    get walletEcdsaCompact(): ECDSACompactWithRecovery;
}
export declare class AccountLinkedSIWESignature extends AccountLinkedSIWESignatureV1 implements signature.AccountLinkedSIWESignature {
    v1: signature.AccountLinkedSIWESignature_V1;
    constructor(obj: Partial<signature.AccountLinkedSIWESignature>);
    static create(text: Uint8Array, signature: Signature): AccountLinkedSIWESignature;
}
export interface KeySigner {
    signKey(key: UnsignedPublicKey): Promise<SignedPublicKey>;
}
export declare enum AccountLinkedRole {
    INBOX_KEY = 0,
    SEND_KEY = 1
}
export declare class WalletSigner implements KeySigner {
    wallet: Signer;
    constructor(wallet: Signer);
    static identitySigRequestText(keyBytes: Uint8Array): string;
    static signerKey(key: SignedPublicKey, signature: ECDSACompactWithRecovery): UnsignedPublicKey | undefined;
    signKey(key: UnsignedPublicKey): Promise<SignedPublicKey>;
}
export interface AccountLinkSigner {
    signKeyWithRole(key: UnsignedPublicKey, role: AccountLinkedRole): Promise<AccountLinkedPublicKey>;
}
export declare class SIWEWalletAccountLinkSigner implements AccountLinkSigner {
    wallet: Signer;
    constructor(wallet: Signer);
    static accountLinkedSIWERoleRequestText(role: AccountLinkedRole): string;
    static accountLinkedSIWEResourceRoleText(keyBytes: Uint8Array, role: AccountLinkedRole): string;
    static defaultAccountLinkSIWERequestText(key: UnsignedPublicKey, role: AccountLinkedRole, walletAddress: string): string;
    signKeyWithRole(key: UnsignedPublicKey, role: AccountLinkedRole): Promise<AccountLinkedPublicKey>;
}
export declare class StaticWalletAccountLinkSigner implements AccountLinkSigner {
    wallet: Signer;
    constructor(wallet: Signer);
    static accountLinkedRoleRequestText(role: AccountLinkedRole): string;
    static accountLinkRequestText(keyBytes: Uint8Array, role: AccountLinkedRole): string;
    signKeyWithRole(key: UnsignedPublicKey, role: AccountLinkedRole): Promise<AccountLinkedPublicKey>;
}
export {};
