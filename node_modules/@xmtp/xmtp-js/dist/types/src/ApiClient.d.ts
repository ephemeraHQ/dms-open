import { messageApi } from '@xmtp/proto';
import { NotifyStreamEntityArrival } from '@xmtp/proto/ts/dist/types/fetch.pb';
import { Authenticator } from './authn';
import { Flatten } from './utils/typedefs';
export declare const MessageApi: typeof messageApi.MessageApi, SortDirection: typeof messageApi.SortDirection;
export declare const ApiUrls: {
    readonly local: "http://localhost:5555";
    readonly dev: "https://dev.xmtp.network";
    readonly production: "https://production.xmtp.network";
};
export declare enum GrpcStatus {
    OK = 0,
    CANCELLED = 1,
    UNKNOWN = 2,
    INVALID_ARGUMENT = 3,
    DEADLINE_EXCEEDED = 4,
    NOT_FOUND = 5,
    ALREADY_EXISTS = 6,
    PERMISSION_DENIED = 7,
    RESOURCE_EXHAUSTED = 8,
    FAILED_PRECONDITION = 9,
    ABORTED = 10,
    OUT_OF_RANGE = 11,
    UNIMPLEMENTED = 12,
    INTERNAL = 13,
    UNAVAILABLE = 14,
    DATA_LOSS = 15,
    UNAUTHENTICATED = 16
}
export declare type GrpcError = Flatten<Error & {
    code?: GrpcStatus;
}>;
export declare type QueryParams = {
    startTime?: Date;
    endTime?: Date;
    contentTopic: string;
};
export declare type QueryAllOptions = {
    direction?: messageApi.SortDirection;
    limit?: number;
};
export declare type QueryStreamOptions = Flatten<Omit<QueryAllOptions, 'limit'> & {
    pageSize?: number;
}>;
export declare type Query = Flatten<QueryParams & QueryStreamOptions>;
export declare type PublishParams = {
    contentTopic: string;
    message: Uint8Array;
    timestamp?: Date;
};
export declare type SubscribeParams = {
    contentTopics: string[];
};
export declare type ApiClientOptions = {
    maxRetries?: number;
    appVersion?: string;
};
export declare type SubscribeCallback = NotifyStreamEntityArrival<messageApi.Envelope>;
export declare type UnsubscribeFn = () => Promise<void>;
/**
 * ApiClient provides a wrapper for calling the GRPC Gateway generated code.
 * It adds some helpers for dealing with paginated data and automatically retries idempotent calls
 */
export default class ApiClient {
    pathPrefix: string;
    maxRetries: number;
    private authCache?;
    appVersion: string | undefined;
    version: string;
    constructor(pathPrefix: string, opts?: ApiClientOptions);
    private _query;
    private _batchQuery;
    private _publish;
    private _subscribe;
    query(params: QueryParams, { direction, limit, }: QueryAllOptions): Promise<messageApi.Envelope[]>;
    queryIterator(params: QueryParams, options: QueryStreamOptions): AsyncGenerator<messageApi.Envelope>;
    queryIteratePages({ contentTopic, startTime, endTime }: QueryParams, { direction, pageSize }: QueryStreamOptions): AsyncGenerator<messageApi.Envelope[]>;
    batchQuery(queries: Query[]): Promise<messageApi.Envelope[][]>;
    publish(messages: PublishParams[]): ReturnType<typeof MessageApi.Publish>;
    subscribe(params: SubscribeParams, callback: SubscribeCallback): UnsubscribeFn;
    private getToken;
    setAuthenticator(authenticator: Authenticator, cacheExpirySeconds?: number): void;
    headers(): Headers;
}
