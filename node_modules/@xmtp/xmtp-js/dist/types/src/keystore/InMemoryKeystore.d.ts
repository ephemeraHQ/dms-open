import { authn, keystore, privateKey, signature } from '@xmtp/proto';
import { PrivateKeyBundleV1 } from './../crypto/PrivateKeyBundle';
import { PublicKeyBundle } from '../crypto';
import { Keystore } from './interfaces';
import InviteStore from './InviteStore';
import { Persistence } from './persistence';
export default class InMemoryKeystore implements Keystore {
    private v1Keys;
    private v2Keys;
    private inviteStore;
    private authenticator;
    private accountAddress;
    constructor(keys: PrivateKeyBundleV1, inviteStore: InviteStore);
    static create(keys: PrivateKeyBundleV1, persistence?: Persistence): Promise<InMemoryKeystore>;
    decryptV1(req: keystore.DecryptV1Request): Promise<keystore.DecryptResponse>;
    decryptV2(req: keystore.DecryptV2Request): Promise<keystore.DecryptResponse>;
    encryptV1(req: keystore.EncryptV1Request): Promise<keystore.EncryptResponse>;
    createAuthToken({ timestampNs, }: keystore.CreateAuthTokenRequest): Promise<authn.Token>;
    encryptV2(req: keystore.EncryptV2Request): Promise<keystore.EncryptResponse>;
    saveInvites(req: keystore.SaveInvitesRequest): Promise<keystore.SaveInvitesResponse>;
    createInvite(req: keystore.CreateInviteRequest): Promise<keystore.CreateInviteResponse>;
    signDigest(req: keystore.SignDigestRequest): Promise<signature.Signature>;
    getV2Conversations(): Promise<keystore.ConversationReference[]>;
    getPublicKeyBundle(): Promise<PublicKeyBundle>;
    getPrivateKeyBundle(): Promise<privateKey.PrivateKeyBundleV1>;
    getAccountAddress(): Promise<string>;
}
