import { Persistence } from './interface';
import { PrivateKey, SignedPrivateKey } from '../../crypto';
/**
 * EncryptedPersistence is a Persistence implementation that uses ECIES to encrypt all values
 * ECIES encryption protects against unauthorized reads, but not unauthorized writes.
 * A third party with access to the underlying store could write malicious data using the public key of the owner
 */
export default class EncryptedPersistence implements Persistence {
    private persistence;
    private privateKey;
    private privateKeyBytes;
    private publicKey;
    constructor(persistence: Persistence, privateKey: PrivateKey | SignedPrivateKey);
    getItem(key: string): Promise<Uint8Array | null>;
    setItem(key: string, value: Uint8Array): Promise<void>;
    private encrypt;
    private decrypt;
    private serializeEcies;
    private deserializeEcies;
}
