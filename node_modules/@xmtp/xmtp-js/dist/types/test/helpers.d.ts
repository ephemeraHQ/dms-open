import { Wallet } from 'ethers';
import { ContentCodec, ContentTypeId, Client } from '../src';
import { Signer } from '../src/types/Signer';
import Stream from '../src/Stream';
import { PublicKeyBundle, SignedPublicKeyBundle } from '../src/crypto';
import { messageApi } from '@xmtp/proto';
export declare const sleep: (ms: number) => Promise<void>;
export declare function pollFor<T>(callback: () => Promise<T>, timeoutMs: number, delayMs: number): Promise<T>;
export declare function waitForUserContact(c1: Client, c2: Client): Promise<PublicKeyBundle | SignedPublicKeyBundle>;
export declare function dumpStream<T>(stream: Stream<T>, timeoutMs?: number): Promise<T[]>;
export declare function newWallet(): Wallet;
export declare function newCustomWallet(): Signer;
export declare function wrapAsLedgerWallet(ethersWallet: Wallet): Signer;
export declare class CodecRegistry {
    private _codecs;
    constructor();
    registerCodec(codec: ContentCodec<any>): void;
    codecFor(contentType: ContentTypeId): ContentCodec<any> | undefined;
}
export declare const newLocalHostClient: (opts?: Partial<import("../src/utils/typedefs").Flatten<import("../src").NetworkOptions & import("../src").KeyStoreOptions & import("../src").ContentOptions & import("../src").LegacyOptions>> | undefined) => Promise<Client>;
export declare const newLocalHostClientWithCustomWallet: (opts?: Partial<import("../src/utils/typedefs").Flatten<import("../src").NetworkOptions & import("../src").KeyStoreOptions & import("../src").ContentOptions & import("../src").LegacyOptions>> | undefined) => Promise<Client>;
export declare const newDevClient: (opts?: Partial<import("../src/utils/typedefs").Flatten<import("../src").NetworkOptions & import("../src").KeyStoreOptions & import("../src").ContentOptions & import("../src").LegacyOptions>> | undefined) => Promise<Client>;
export declare const buildEnvelope: (message: Uint8Array, contentTopic: string, created: Date) => messageApi.Envelope;
export declare const buildProtoEnvelope: (payload: Uint8Array, contentTopic: string, timestamp: Date) => {
    contentTopic: string;
    timestampNs: import("long");
    payload: Uint8Array;
};
