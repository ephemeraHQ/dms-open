"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildProtoEnvelope = exports.buildEnvelope = exports.newDevClient = exports.newLocalHostClientWithCustomWallet = exports.newLocalHostClient = exports.CodecRegistry = exports.wrapAsLedgerWallet = exports.newCustomWallet = exports.newWallet = exports.dumpStream = exports.waitForUserContact = exports.pollFor = exports.sleep = void 0;
const utils_1 = require("./../src/utils");
const ethers_1 = require("ethers");
const src_1 = require("../src");
const utils_2 = require("../src/utils");
const assert_1 = __importDefault(require("assert"));
const proto_1 = require("@xmtp/proto");
const { b64Encode } = proto_1.fetcher;
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
exports.sleep = sleep;
function pollFor(callback, timeoutMs, delayMs) {
    return __awaiter(this, void 0, void 0, function* () {
        const started = Date.now();
        try {
            return yield callback();
        }
        catch (err) {
            if (delayMs) {
                yield (0, exports.sleep)(delayMs);
            }
            const elapsedMs = Date.now() - started;
            const remainingTimeoutMs = timeoutMs - elapsedMs;
            if (remainingTimeoutMs <= 0) {
                throw new Error('timeout exceeded');
            }
            return yield pollFor(callback, remainingTimeoutMs, delayMs);
        }
    });
}
exports.pollFor = pollFor;
function waitForUserContact(c1, c2) {
    return __awaiter(this, void 0, void 0, function* () {
        return pollFor(() => __awaiter(this, void 0, void 0, function* () {
            const contact = yield c1.getUserContact(c2.address);
            assert_1.default.ok(contact);
            return contact;
        }), 20000, 200);
    });
}
exports.waitForUserContact = waitForUserContact;
function dumpStream(stream, timeoutMs = 1000) {
    return __awaiter(this, void 0, void 0, function* () {
        const messages = [];
        try {
            while (true) {
                const result = yield (0, utils_2.promiseWithTimeout)(timeoutMs, () => stream.next(), 'timeout');
                if (result.done) {
                    break;
                }
                messages.push(result.value);
            }
        }
        catch (_a) {
        }
        finally {
            stream.return();
        }
        return messages;
    });
}
exports.dumpStream = dumpStream;
function newWallet() {
    const key = src_1.PrivateKey.generate();
    if (!key.secp256k1) {
        throw new Error('invalid key');
    }
    return new ethers_1.Wallet(key.secp256k1.bytes);
}
exports.newWallet = newWallet;
function newCustomWallet() {
    const ethersWallet = newWallet();
    // Client apps don't have to use ethers, they can implement their
    // own Signer methods. Here we implement a custom Signer that is actually
    // backed by ethers.
    return {
        getAddress() {
            return ethersWallet.getAddress();
        },
        signMessage(message) {
            return ethersWallet.signMessage(message).then((signature) => {
                return new Promise((resolve) => {
                    resolve(signature);
                });
            });
        },
    };
}
exports.newCustomWallet = newCustomWallet;
function wrapAsLedgerWallet(ethersWallet) {
    // Wraps a wallet and switches the last byte of signature to canonical form
    // so 0x1b => 0x00 and 0x1c => 0x01
    return {
        getAddress() {
            return ethersWallet.getAddress();
        },
        signMessage(message) {
            return ethersWallet.signMessage(message).then((signature) => {
                const bytes = Buffer.from(signature.slice(2), 'hex');
                const lastByte = bytes[bytes.length - 1];
                if (lastByte < 0x1b) {
                    return new Promise((resolve) => resolve(signature));
                }
                bytes[bytes.length - 1] = lastByte - 0x1b;
                return new Promise((resolve) => {
                    resolve('0x' + bytes.toString('hex'));
                });
            });
        },
    };
}
exports.wrapAsLedgerWallet = wrapAsLedgerWallet;
// A helper to replace a full Client in testing custom content types,
// extracting just the codec registry aspect of the client.
class CodecRegistry {
    constructor() {
        this._codecs = new Map();
        this.registerCodec(new src_1.TextCodec());
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerCodec(codec) {
        const id = codec.contentType;
        const key = `${id.authorityId}/${id.typeId}`;
        this._codecs.set(key, codec);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    codecFor(contentType) {
        const key = `${contentType.authorityId}/${contentType.typeId}`;
        return this._codecs.get(key);
    }
}
exports.CodecRegistry = CodecRegistry;
// client running against local node running on the host,
// see github.com/xmtp/xmtp-node-go/scripts/xmtp-js.sh
const newLocalHostClient = (opts) => src_1.Client.create(newWallet(), Object.assign({ env: 'local' }, opts));
exports.newLocalHostClient = newLocalHostClient;
// client running against local node running on the host,
// with a non-ethers wallet
const newLocalHostClientWithCustomWallet = (opts) => src_1.Client.create(newCustomWallet(), Object.assign({ env: 'local' }, opts));
exports.newLocalHostClientWithCustomWallet = newLocalHostClientWithCustomWallet;
// client running against the dev cluster in AWS
const newDevClient = (opts) => src_1.Client.create(newWallet(), Object.assign({ env: 'dev' }, opts));
exports.newDevClient = newDevClient;
const buildEnvelope = (message, contentTopic, created) => {
    return {
        contentTopic,
        timestampNs: (0, utils_1.toNanoString)(created),
        message: b64Encode(message, 0, message.length),
    };
};
exports.buildEnvelope = buildEnvelope;
const buildProtoEnvelope = (payload, contentTopic, timestamp) => {
    return {
        contentTopic,
        timestampNs: (0, utils_1.dateToNs)(timestamp),
        payload,
    };
};
exports.buildProtoEnvelope = buildProtoEnvelope;
//# sourceMappingURL=helpers.js.map