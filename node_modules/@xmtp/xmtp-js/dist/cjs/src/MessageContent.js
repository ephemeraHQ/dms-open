"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentTypeFallback = exports.ContentTypeId = void 0;
// Represents proto.ContentTypeId
class ContentTypeId {
    constructor(obj) {
        this.authorityId = obj.authorityId;
        this.typeId = obj.typeId;
        this.versionMajor = obj.versionMajor;
        this.versionMinor = obj.versionMinor;
    }
    toString() {
        return `${this.authorityId}/${this.typeId}:${this.versionMajor}.${this.versionMinor}`;
    }
    sameAs(id) {
        return this.authorityId === id.authorityId && this.typeId === id.typeId;
    }
}
exports.ContentTypeId = ContentTypeId;
// xmtp.org/fallback
//
// This is not a real content type, it is used to signal to the recipient
// that the content in the message is the fallback description (if present)
// in case the original content type is not supported.
// This content type MUST NOT be used to send content.
exports.ContentTypeFallback = new ContentTypeId({
    authorityId: 'xmtp.org',
    typeId: 'fallback',
    versionMajor: 1,
    versionMinor: 0,
});
//# sourceMappingURL=MessageContent.js.map