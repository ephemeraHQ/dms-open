"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto_1 = require("@xmtp/proto");
const async_mutex_1 = require("async-mutex");
const utils_1 = require("./utils");
const INVITE_KEY = 'invitations/v1';
/**
 * InviteStore holds a simple map of topic -> TopicData and writes to the persistence layer on changes
 */
class InviteStore {
    constructor(persistence, initialData = new Map()) {
        this.persistence = persistence;
        this.mutex = new async_mutex_1.Mutex();
        this.topicMap = initialData;
    }
    static create(persistence) {
        return __awaiter(this, void 0, void 0, function* () {
            if (persistence) {
                const rawData = yield persistence.getItem(INVITE_KEY);
                if (rawData) {
                    try {
                        const inviteMap = (0, utils_1.typeSafeTopicMap)(proto_1.keystore.TopicMap.decode(rawData));
                        // Create an InviteStore with data preloaded
                        return new InviteStore(persistence, new Map(Object.entries(inviteMap)));
                    }
                    catch (e) {
                        console.warn(`Error loading invites from store: ${e}`);
                    }
                }
            }
            return new InviteStore(persistence);
        });
    }
    add(topicData) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                let isDirty = false;
                for (const row of topicData) {
                    // This will not overwrite any existing values. First invite found in the store for a given topic will always be used
                    // Duplicates do not throw errors
                    if (!this.topicMap.has(row.invitation.topic)) {
                        this.topicMap.set(row.invitation.topic, row);
                        isDirty = true;
                    }
                }
                // Only write to persistence once, and only if we have added new invites
                if (isDirty && this.persistence) {
                    yield this.persistence.setItem(INVITE_KEY, this.toBytes());
                }
            }));
        });
    }
    get topics() {
        return [...this.topicMap.values()];
    }
    lookup(topic) {
        return this.topicMap.get(topic);
    }
    toBytes() {
        return proto_1.keystore.TopicMap.encode({
            topics: Object.fromEntries(this.topicMap),
        }).finish();
    }
}
exports.default = InviteStore;
//# sourceMappingURL=InviteStore.js.map