"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_sha3_1 = require("js-sha3");
const proto_1 = require("@xmtp/proto");
const AuthData_1 = __importDefault(require("./AuthData"));
const utils_1 = require("../crypto/utils");
const Token_1 = __importDefault(require("./Token"));
class LocalAuthenticator {
    constructor(identityKey) {
        if (!identityKey.publicKey.signature) {
            throw new Error('Provided public key is not signed');
        }
        this.identityKey = identityKey;
    }
    createToken(timestamp) {
        return __awaiter(this, void 0, void 0, function* () {
            const authData = AuthData_1.default.create(this.identityKey.publicKey.walletSignatureAddress(), timestamp || new Date());
            const authDataBytes = authData.toBytes();
            const digest = (0, js_sha3_1.keccak256)(authDataBytes);
            const authSig = yield this.identityKey.sign((0, utils_1.hexToBytes)(digest));
            return new Token_1.default(proto_1.authn.Token.fromPartial({
                identityKey: proto_1.publicKey.PublicKey.fromPartial(
                // The generated types are overly strict and don't like our additional methods
                // eslint-disable-next-line
                // @ts-ignore
                this.identityKey.publicKey),
                authDataBytes,
                // The generated types are overly strict and don't like our additional methods
                // eslint-disable-next-line
                // @ts-ignore
                authDataSignature: proto_1.signature.Signature.fromPartial(authSig),
            }));
        });
    }
}
exports.default = LocalAuthenticator;
//# sourceMappingURL=LocalAuthenticator.js.map