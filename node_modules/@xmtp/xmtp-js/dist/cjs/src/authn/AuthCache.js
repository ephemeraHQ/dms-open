"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Default to 10 seconds less than expected expiry to give some wiggle room near the end
// https://github.com/xmtp/xmtp-node-go/blob/main/pkg/api/authentication.go#L18
const DEFAULT_MAX_AGE_SECONDS = 60 * 60 - 10;
class AuthCache {
    constructor(authenticator, cacheExpirySeconds = DEFAULT_MAX_AGE_SECONDS) {
        this.authenticator = authenticator;
        this.maxAgeMs = cacheExpirySeconds * 1000;
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.token || this.token.ageMs > this.maxAgeMs) {
                yield this.refresh();
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return this.token.toBase64();
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            this.token = yield this.authenticator.createToken();
        });
    }
}
exports.default = AuthCache;
//# sourceMappingURL=AuthCache.js.map