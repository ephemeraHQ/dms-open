"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto_1 = require("@xmtp/proto");
const AuthData_1 = __importDefault(require("./AuthData"));
class Token {
    constructor({ identityKey, authDataBytes, authDataSignature }) {
        if (!identityKey) {
            throw new Error('Missing identity key in token');
        }
        if (!authDataSignature) {
            throw new Error('Missing authDataSignature in token');
        }
        this.identityKey = identityKey;
        this.authDataBytes = authDataBytes;
        this.authDataSignature = authDataSignature;
    }
    // Get AuthData, generating from bytes and cacheing the first time it is accessed
    get authData() {
        if (!this._authData) {
            this._authData = AuthData_1.default.fromBytes(this.authDataBytes);
        }
        return this._authData;
    }
    get ageMs() {
        const now = new Date().valueOf();
        const authData = this.authData;
        const createdAt = authData.createdNs.div(1000000).toNumber();
        return now - createdAt;
    }
    toBytes() {
        return proto_1.authn.Token.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Token(proto_1.authn.Token.decode(bytes));
    }
    toBase64() {
        return Buffer.from(this.toBytes()).toString('base64');
    }
}
exports.default = Token;
//# sourceMappingURL=Token.js.map