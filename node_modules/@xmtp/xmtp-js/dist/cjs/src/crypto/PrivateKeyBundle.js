"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodePrivateKeyBundle = exports.PrivateKeyBundleV1 = exports.PrivateKeyBundleV2 = exports.PrivateKeyBundleV3 = void 0;
const proto_1 = require("@xmtp/proto");
const PrivateKey_1 = require("./PrivateKey");
const Signature_1 = require("./Signature");
const PublicKeyBundle_1 = require("./PublicKeyBundle");
const errors_1 = require("./errors");
class PrivateKeyBundleV3 {
    constructor(bundle) {
        if (!bundle.accountLinkedKey) {
            throw new Error('missing account linked key');
        }
        this.accountLinkedKey = new PrivateKey_1.AccountLinkedPrivateKey(bundle.accountLinkedKey);
        this.preKeys = (bundle.preKeys || []).map((k) => new PrivateKey_1.SignedPrivateKey(k));
    }
    // Generate a new key bundle with the preKey signed by the accountLinkedKey.
    // Sign the accountLinkedKey with the provided wallet as well.
    static generate(wallet, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountLinkedKey = yield PrivateKey_1.AccountLinkedPrivateKey.generate(new Signature_1.StaticWalletAccountLinkSigner(wallet), role);
            const bundle = new PrivateKeyBundleV3({
                accountLinkedKey,
                preKeys: [],
            });
            yield bundle.addPreKey();
            return bundle;
        });
    }
    // Generate a new key bundle with the preKey signed by the accountLinkedKey.
    // Sign the accountLinkedKey with the provided wallet as well. Same as above
    // but uses SIWE format signature text. NOTE: in practice, consumers should
    // only use this method if they're okay with using a default SIWE rather than
    // reusing their app-specific login SIWE.
    static generateSIWE(wallet, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountLinkedKey = yield PrivateKey_1.AccountLinkedPrivateKey.generate(new Signature_1.SIWEWalletAccountLinkSigner(wallet), role);
            const bundle = new PrivateKeyBundleV3({
                accountLinkedKey,
                preKeys: [],
            });
            yield bundle.addPreKey();
            return bundle;
        });
    }
    static fromLegacyBundle(bundle, role) {
        return new PrivateKeyBundleV3({
            accountLinkedKey: PrivateKey_1.AccountLinkedPrivateKey.fromLegacyKey(bundle.identityKey, role),
            preKeys: bundle.preKeys,
        });
    }
    getLinkedAddress(role) {
        return this.accountLinkedKey.publicKey.getLinkedAddress(role);
    }
    // Return a key bundle with the current pre-key.
    getPublicKeyBundle() {
        if (!this._publicKeyBundle) {
            this._publicKeyBundle = new PublicKeyBundle_1.SignedPublicKeyBundleV2({
                accountLinkedKey: this.accountLinkedKey.publicKey,
                preKey: this.getCurrentPreKey().publicKey,
            });
        }
        return this._publicKeyBundle;
    }
    // Generate a new pre-key to be used as the current pre-key.
    addPreKey() {
        return __awaiter(this, void 0, void 0, function* () {
            this._publicKeyBundle = undefined;
            const preKey = yield PrivateKey_1.SignedPrivateKey.generate(this.accountLinkedKey);
            this.preKeys.unshift(preKey);
        });
    }
    // Return the current (latest) pre-key (to be advertised).
    getCurrentPreKey() {
        return this.preKeys[0];
    }
    // Find pre-key matching the provided public key.
    findPreKey(which) {
        const preKey = this.preKeys.find((key) => key.matches(which));
        if (!preKey) {
            throw new errors_1.NoMatchingPreKeyError(which);
        }
        return preKey;
    }
    // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol
    // where the sender's ephemeral key pair is replaced by the sender's pre-key.
    // @peer is the peer's public key bundle
    // @myPreKey indicates which of my preKeys should be used to derive the secret
    // @recipient indicates if this is the sending or receiving side.
    sharedSecret(peer, myPreKey, isRecipient) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!peer.accountLinkedKey || !peer.preKey) {
                throw new Error('invalid peer key bundle');
            }
            if (!(yield peer.accountLinkedKey.verifyKey(peer.preKey))) {
                throw new Error('peer preKey signature invalid');
            }
            if (!this.accountLinkedKey) {
                throw new Error('missing account linked key');
            }
            let dh1, dh2, preKey;
            if (isRecipient) {
                if (!this.getLinkedAddress(Signature_1.AccountLinkedRole.INBOX_KEY) ||
                    !peer.getLinkedAddress(Signature_1.AccountLinkedRole.SEND_KEY)) {
                    throw new Error('bundles have invalid roles');
                }
                preKey = this.findPreKey(myPreKey);
                dh1 = preKey.sharedSecret(peer.accountLinkedKey);
                dh2 = this.accountLinkedKey.sharedSecret(peer.preKey);
            }
            else {
                if (!this.getLinkedAddress(Signature_1.AccountLinkedRole.SEND_KEY) ||
                    !peer.getLinkedAddress(Signature_1.AccountLinkedRole.INBOX_KEY)) {
                    throw new Error('bundles have invalid roles');
                }
                preKey = this.findPreKey(myPreKey);
                dh1 = this.accountLinkedKey.sharedSecret(peer.preKey);
                dh2 = preKey.sharedSecret(peer.accountLinkedKey);
            }
            const dh3 = preKey.sharedSecret(peer.preKey);
            const secret = new Uint8Array(dh1.length + dh2.length + dh3.length);
            secret.set(dh1, 0);
            secret.set(dh2, dh1.length);
            secret.set(dh3, dh1.length + dh2.length);
            return secret;
        });
    }
}
exports.PrivateKeyBundleV3 = PrivateKeyBundleV3;
// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.
// This bundle must not be shared with anyone, although will have to be persisted
// somehow so that older messages can be decrypted again.
class PrivateKeyBundleV2 {
    constructor(bundle) {
        this.version = 2;
        if (!bundle.identityKey) {
            throw new Error('missing identity key');
        }
        this.identityKey = new PrivateKey_1.SignedPrivateKey(bundle.identityKey);
        this.preKeys = (bundle.preKeys || []).map((k) => new PrivateKey_1.SignedPrivateKey(k));
    }
    // Generate a new key bundle with the preKey signed byt the identityKey.
    // Optionally sign the identityKey with the provided wallet as well.
    static generate(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const identityKey = yield PrivateKey_1.SignedPrivateKey.generate(new Signature_1.WalletSigner(wallet));
            const bundle = new PrivateKeyBundleV2({
                identityKey,
                preKeys: [],
            });
            yield bundle.addPreKey();
            return bundle;
        });
    }
    // Return the current (latest) pre-key (to be advertised).
    getCurrentPreKey() {
        return this.preKeys[0];
    }
    // Find pre-key matching the provided public key.
    findPreKey(which) {
        const preKey = this.preKeys.find((key) => key.matches(which));
        if (!preKey) {
            throw new errors_1.NoMatchingPreKeyError(which);
        }
        return preKey;
    }
    // Generate a new pre-key to be used as the current pre-key.
    addPreKey() {
        return __awaiter(this, void 0, void 0, function* () {
            this._publicKeyBundle = undefined;
            const preKey = yield PrivateKey_1.SignedPrivateKey.generate(this.identityKey);
            this.preKeys.unshift(preKey);
        });
    }
    // Return a key bundle with the current pre-key.
    getPublicKeyBundle() {
        if (!this._publicKeyBundle) {
            this._publicKeyBundle = new PublicKeyBundle_1.SignedPublicKeyBundle({
                identityKey: this.identityKey.publicKey,
                preKey: this.getCurrentPreKey().publicKey,
            });
        }
        return this._publicKeyBundle;
    }
    // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol
    // where the sender's ephemeral key pair is replaced by the sender's pre-key.
    // @peer is the peer's public key bundle
    // @myPreKey indicates which of my preKeys should be used to derive the secret
    // @recipient indicates if this is the sending or receiving side.
    sharedSecret(peer, myPreKey, isRecipient) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!peer.identityKey || !peer.preKey) {
                throw new Error('invalid peer key bundle');
            }
            if (!(yield peer.identityKey.verifyKey(peer.preKey))) {
                throw new Error('peer preKey signature invalid');
            }
            if (!this.identityKey) {
                throw new Error('missing identity key');
            }
            let dh1, dh2, preKey;
            if (isRecipient) {
                preKey = this.findPreKey(myPreKey);
                dh1 = preKey.sharedSecret(peer.identityKey);
                dh2 = this.identityKey.sharedSecret(peer.preKey);
            }
            else {
                preKey = this.findPreKey(myPreKey);
                dh1 = this.identityKey.sharedSecret(peer.preKey);
                dh2 = preKey.sharedSecret(peer.identityKey);
            }
            const dh3 = preKey.sharedSecret(peer.preKey);
            const secret = new Uint8Array(dh1.length + dh2.length + dh3.length);
            secret.set(dh1, 0);
            secret.set(dh2, dh1.length);
            secret.set(dh3, dh1.length + dh2.length);
            return secret;
        });
    }
    encode() {
        return proto_1.privateKey.PrivateKeyBundle.encode({
            v1: undefined,
            v2: this,
            v3: undefined,
        }).finish();
    }
    equals(other) {
        if (this.preKeys.length !== other.preKeys.length) {
            return false;
        }
        for (let i = 0; i < this.preKeys.length; i++) {
            if (!this.preKeys[i].equals(other.preKeys[i])) {
                return false;
            }
        }
        return this.identityKey.equals(other.identityKey);
    }
    static fromLegacyBundle(bundle) {
        return new PrivateKeyBundleV2({
            identityKey: PrivateKey_1.SignedPrivateKey.fromLegacyKey(bundle.identityKey, true),
            preKeys: bundle.preKeys.map((k) => PrivateKey_1.SignedPrivateKey.fromLegacyKey(k)),
        });
    }
}
exports.PrivateKeyBundleV2 = PrivateKeyBundleV2;
// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.
// This bundle must not be shared with anyone, although will have to be persisted
// somehow so that older messages can be decrypted again.
class PrivateKeyBundleV1 {
    constructor(bundle) {
        this.version = 1;
        if (!bundle.identityKey) {
            throw new Error('missing identity key');
        }
        this.identityKey = new PrivateKey_1.PrivateKey(bundle.identityKey);
        this.preKeys = (bundle.preKeys || []).map((k) => new PrivateKey_1.PrivateKey(k));
    }
    // Generate a new key bundle with the preKey signed byt the identityKey.
    // Optionally sign the identityKey with the provided wallet as well.
    static generate(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const identityKey = PrivateKey_1.PrivateKey.generate();
            if (wallet) {
                yield identityKey.publicKey.signWithWallet(wallet);
            }
            const bundle = new PrivateKeyBundleV1({
                identityKey,
                preKeys: [],
            });
            yield bundle.addPreKey();
            return bundle;
        });
    }
    // Return the current (latest) pre-key (to be advertised).
    getCurrentPreKey() {
        return this.preKeys[0];
    }
    // Find pre-key matching the provided public key.
    findPreKey(which) {
        const preKey = this.preKeys.find((key) => key.matches(which));
        if (!preKey) {
            throw new errors_1.NoMatchingPreKeyError(which);
        }
        return preKey;
    }
    // Generate a new pre-key to be used as the current pre-key.
    addPreKey() {
        return __awaiter(this, void 0, void 0, function* () {
            this._publicKeyBundle = undefined;
            const preKey = PrivateKey_1.PrivateKey.generate();
            yield this.identityKey.signKey(preKey.publicKey);
            this.preKeys.unshift(preKey);
        });
    }
    // Return a key bundle with the current pre-key.
    getPublicKeyBundle() {
        if (!this._publicKeyBundle) {
            this._publicKeyBundle = new PublicKeyBundle_1.PublicKeyBundle({
                identityKey: this.identityKey.publicKey,
                preKey: this.getCurrentPreKey().publicKey,
            });
        }
        return this._publicKeyBundle;
    }
    // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol
    // where the sender's ephemeral key pair is replaced by the sender's pre-key.
    // @peer is the peer's public key bundle
    // @myPreKey indicates which of my preKeys should be used to derive the secret
    // @recipient indicates if this is the sending or receiving side.
    sharedSecret(peer, myPreKey, isRecipient) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!peer.identityKey || !peer.preKey) {
                throw new Error('invalid peer key bundle');
            }
            if (!(yield peer.identityKey.verifyKey(peer.preKey))) {
                throw new Error('peer preKey signature invalid');
            }
            if (!this.identityKey) {
                throw new Error('missing identity key');
            }
            let dh1, dh2, preKey;
            if (isRecipient) {
                preKey = this.findPreKey(myPreKey);
                dh1 = preKey.sharedSecret(peer.identityKey);
                dh2 = this.identityKey.sharedSecret(peer.preKey);
            }
            else {
                preKey = this.findPreKey(myPreKey);
                dh1 = this.identityKey.sharedSecret(peer.preKey);
                dh2 = preKey.sharedSecret(peer.identityKey);
            }
            const dh3 = preKey.sharedSecret(peer.preKey);
            const secret = new Uint8Array(dh1.length + dh2.length + dh3.length);
            secret.set(dh1, 0);
            secret.set(dh2, dh1.length);
            secret.set(dh3, dh1.length + dh2.length);
            return secret;
        });
    }
    encode() {
        return proto_1.privateKey.PrivateKeyBundle.encode({
            v1: this,
            v2: undefined,
            v3: undefined,
        }).finish();
    }
}
exports.PrivateKeyBundleV1 = PrivateKeyBundleV1;
function decodePrivateKeyBundle(bytes) {
    const b = proto_1.privateKey.PrivateKeyBundle.decode(bytes);
    if (b.v1) {
        return new PrivateKeyBundleV1(b.v1);
    }
    if (b.v2) {
        return new PrivateKeyBundleV2(b.v2);
    }
    throw new Error('unknown private key bundle version');
}
exports.decodePrivateKeyBundle = decodePrivateKeyBundle;
//# sourceMappingURL=PrivateKeyBundle.js.map