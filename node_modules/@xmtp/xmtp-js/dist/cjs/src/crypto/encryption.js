"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.encrypt = exports.sha256 = exports.crypto = void 0;
const Ciphertext_1 = __importStar(require("./Ciphertext"));
// crypto should provide access to standard Web Crypto API
// in both the browser environment and node.
exports.crypto = typeof window !== 'undefined'
    ? window.crypto
    : // eslint-disable-next-line @typescript-eslint/no-var-requires
        require('crypto').webcrypto;
const hkdfNoInfo = new ArrayBuffer(0);
// This is a variation of https://github.com/paulmillr/noble-secp256k1/blob/main/index.ts#L1378-L1388
// that uses `digest('SHA-256', bytes)` instead of `digest('SHA-256', bytes.buffer)`
// which seems to produce different results.
function sha256(bytes) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Uint8Array(yield exports.crypto.subtle.digest('SHA-256', bytes));
    });
}
exports.sha256 = sha256;
// symmetric authenticated encryption of plaintext using the secret;
// additionalData is used to protect un-encrypted parts of the message (header)
// in the authentication scope of the encryption.
function encrypt(plain, secret, additionalData) {
    return __awaiter(this, void 0, void 0, function* () {
        const salt = exports.crypto.getRandomValues(new Uint8Array(Ciphertext_1.KDFSaltSize));
        const nonce = exports.crypto.getRandomValues(new Uint8Array(Ciphertext_1.AESGCMNonceSize));
        const key = yield hkdf(secret, salt);
        const encrypted = yield exports.crypto.subtle.encrypt(aesGcmParams(nonce, additionalData), key, plain);
        return new Ciphertext_1.default({
            aes256GcmHkdfSha256: {
                payload: new Uint8Array(encrypted),
                hkdfSalt: salt,
                gcmNonce: nonce,
            },
        });
    });
}
exports.encrypt = encrypt;
// symmetric authenticated decryption of the encrypted ciphertext using the secret and additionalData
function decrypt(encrypted, secret, additionalData) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!encrypted.aes256GcmHkdfSha256) {
            throw new Error('invalid payload ciphertext');
        }
        const key = yield hkdf(secret, encrypted.aes256GcmHkdfSha256.hkdfSalt);
        const decrypted = yield exports.crypto.subtle.decrypt(aesGcmParams(encrypted.aes256GcmHkdfSha256.gcmNonce, additionalData), key, encrypted.aes256GcmHkdfSha256.payload);
        return new Uint8Array(decrypted);
    });
}
exports.decrypt = decrypt;
// helper for building Web Crypto API encryption parameter structure
function aesGcmParams(nonce, additionalData) {
    const spec = {
        name: 'AES-GCM',
        iv: nonce,
    };
    if (additionalData) {
        spec.additionalData = additionalData;
    }
    return spec;
}
// Derive AES-256-GCM key from a shared secret and salt.
// Returns crypto.CryptoKey suitable for the encrypt/decrypt API
function hkdf(secret, salt) {
    return __awaiter(this, void 0, void 0, function* () {
        const key = yield exports.crypto.subtle.importKey('raw', secret, 'HKDF', false, [
            'deriveKey',
        ]);
        return exports.crypto.subtle.deriveKey({ name: 'HKDF', hash: 'SHA-256', salt, info: hkdfNoInfo }, key, { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt']);
    });
}
//# sourceMappingURL=encryption.js.map