"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AESGCMTagLength = exports.AESGCMNonceSize = exports.KDFSaltSize = exports.AESKeySize = void 0;
const proto_1 = require("@xmtp/proto");
exports.AESKeySize = 32; // bytes
exports.KDFSaltSize = 32; // bytes
// AES-GCM defaults from https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams
exports.AESGCMNonceSize = 12; // property iv
exports.AESGCMTagLength = 16; // property tagLength
// Ciphertext packages the encrypted ciphertext with the salt and nonce used to produce it.
// salt and nonce are not secret, and should be transmitted/stored along with the encrypted ciphertext.
class Ciphertext {
    constructor(obj) {
        if (!obj.aes256GcmHkdfSha256) {
            throw new Error('invalid ciphertext');
        }
        if (obj.aes256GcmHkdfSha256.payload.length < exports.AESGCMTagLength) {
            throw new Error(`invalid ciphertext ciphertext length: ${obj.aes256GcmHkdfSha256.payload.length}`);
        }
        if (obj.aes256GcmHkdfSha256.hkdfSalt.length !== exports.KDFSaltSize) {
            throw new Error(`invalid ciphertext salt length: ${obj.aes256GcmHkdfSha256.hkdfSalt.length}`);
        }
        if (obj.aes256GcmHkdfSha256.gcmNonce.length !== exports.AESGCMNonceSize) {
            throw new Error(`invalid ciphertext nonce length: ${obj.aes256GcmHkdfSha256.gcmNonce.length}`);
        }
        this.aes256GcmHkdfSha256 = obj.aes256GcmHkdfSha256;
    }
    toBytes() {
        return proto_1.ciphertext.Ciphertext.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Ciphertext(proto_1.ciphertext.Ciphertext.decode(bytes));
    }
}
exports.default = Ciphertext;
//# sourceMappingURL=Ciphertext.js.map