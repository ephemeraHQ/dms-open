declare type Address = `0x${string}`;
declare type BlockExplorer = {
    name: string;
    url: string;
};
declare type Chain = {
    /** ID in number form */
    id: number;
    /** Human-readable name */
    name: string;
    /** Internal network name */
    network: string;
    /** Currency used by chain */
    nativeCurrency: NativeCurrency;
    /** Collection of RPC endpoints */
    rpcUrls: {
        [key: string]: RpcUrls;
        default: RpcUrls;
    };
    /** Collection of block explorers */
    blockExplorers?: {
        [key: string]: BlockExplorer;
        default: BlockExplorer;
    };
    /** Collection of contracts */
    contracts?: {
        ensRegistry?: Contract;
        multicall3?: Contract;
    };
    /** Flag for test networks */
    testnet?: boolean;
};
declare type Contract = {
    address: Address;
    blockCreated?: number;
};
declare type NativeCurrency = {
    name: string;
    /** 2-6 characters long */
    symbol: string;
    decimals: number;
};
declare type RpcUrls = {
    http: string[];
    webSocket?: string[];
};

declare const arbitrum: Chain;

declare const arbitrumGoerli: Chain;

declare const avalanche: Chain;

declare const avalancheFuji: Chain;

declare const bsc: Chain;

declare const bscTestnet: Chain;

declare const fantom: Chain;

declare const fantomTestnet: Chain;

declare const foundry: Chain;

declare const goerli: Chain;

declare const hardhat: Chain;

declare const localhost: Chain;

declare const mainnet: Chain;

declare const optimism: Chain;

declare const optimismGoerli: Chain;

declare const polygon: Chain;

declare const polygonMumbai: Chain;

declare const sepolia: Chain;

export { Chain, arbitrum, arbitrumGoerli, avalanche, avalancheFuji, bsc, bscTestnet, fantom, fantomTestnet, foundry, goerli, hardhat, localhost, mainnet, optimism, optimismGoerli, polygon, polygonMumbai, sepolia };
